package com.supinfo.cubbyhole.mobileapp.activities;

import android.app.FragmentTransaction;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.supinfo.cubbyhole.mobileapp.R;
import com.supinfo.cubbyhole.mobileapp.adapters.GenericListAdapter;
import com.supinfo.cubbyhole.mobileapp.models.Back;
import com.supinfo.cubbyhole.mobileapp.models.Empty;
import com.supinfo.cubbyhole.mobileapp.models.File;
import com.supinfo.cubbyhole.mobileapp.models.Folder;
import com.supinfo.cubbyhole.mobileapp.quickactions.ActionItem;
import com.supinfo.cubbyhole.mobileapp.quickactions.QuickAction;
import com.supinfo.cubbyhole.mobileapp.utils.Data;
import com.supinfo.cubbyhole.mobileapp.utils.Utils;

import java.util.ArrayList;
import java.util.List;

import uk.co.senab.actionbarpulltorefresh.library.ActionBarPullToRefresh;
import uk.co.senab.actionbarpulltorefresh.library.PullToRefreshLayout;
import uk.co.senab.actionbarpulltorefresh.library.listeners.OnRefreshListener;

/**
 * Created by anthonyvialleton on 04/04/14.
 */

public class Home extends ActionBarActivity implements OnRefreshListener{

    private ProgressBar pb;
    private ListView list;
    private List<Object> objArray;
    private GenericListAdapter listAdapter;
    
    private	PullToRefreshLayout mPullToRefreshLayout;
    private TextView tv;
    
    private Object itemSelected = null;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_home);

        getSupportActionBar().setTitle(Utils.getUserFromSharedPreferences(this).getEmail());

        tv = (TextView) findViewById(R.id.home_nofile);
        
        /* Quick Actions */
        /* ************* */

        // item.setSticky permet de desactiver le dismiss de la dialog apres le clic sur l'item
        ActionItem moveItem 	= new ActionItem(Utils.QUICKACTION_ID_MOVE, "DÃ©placer", getResources().getDrawable(R.drawable.dark_rename));
        ActionItem copyItem 	= new ActionItem(Utils.QUICKACTION_ID_COPY, "Copier", getResources().getDrawable(R.drawable.dark_rename));
        ActionItem renameItem 	= new ActionItem(Utils.QUICKACTION_ID_RENAME, "Renommer", getResources().getDrawable(R.drawable.dark_rename));
        ActionItem deleteItem 	= new ActionItem(Utils.QUICKACTION_ID_DELETE, "Supprimer", getResources().getDrawable(R.drawable.dark_delete));

        final QuickAction quickAction = new QuickAction(this, QuickAction.HORIZONTAL);

        quickAction.addActionItem(moveItem);
        quickAction.addActionItem(copyItem);
        quickAction.addActionItem(renameItem);
        quickAction.addActionItem(deleteItem);

        quickAction.setOnActionItemClickListener(new QuickAction.OnActionItemClickListener() {
            @Override
            public void onItemClick(QuickAction source, int pos, int actionId) {

                ActionItem actionItem = quickAction.getActionItem(pos);

                if (actionId == Utils.QUICKACTION_ID_RENAME) {
                	
                	if (itemSelected != null && itemSelected instanceof Folder){
                		
                	}else if (itemSelected != null && itemSelected instanceof File){
                		
                	}
                	
                } else if (actionId == Utils.QUICKACTION_ID_DELETE) {

                	if (itemSelected != null && itemSelected instanceof Folder){

                		new DeleteData(Home.this, itemSelected).execute();
                		
                	}else if (itemSelected != null && itemSelected instanceof File){
                		
                		
                		
                	}
                	
                }else if (actionId == Utils.QUICKACTION_ID_COPY){
                	
                	
                	if (itemSelected != null && itemSelected instanceof Folder){
                		
                	}else if (itemSelected != null && itemSelected instanceof File){
                		
                	}

                }else if (actionId == Utils.QUICKACTION_ID_MOVE){

                	if (itemSelected != null && itemSelected instanceof Folder){
                		
                	}else if (itemSelected != null && itemSelected instanceof File){
                		
                	}
                	
                }
                
            }
        });


         /* List */
        /* ***** */

        pb = (ProgressBar)findViewById(R.id.home_pb);
        list = (ListView)findViewById(R.id.home_list);
        mPullToRefreshLayout = (PullToRefreshLayout) findViewById(R.id.ptr_layout);
        
        // Instanciation du pulltorefresh
        ActionBarPullToRefresh.from(this)
                .allChildrenArePullable()
                .listener(this)
                .setup(mPullToRefreshLayout);
        
        // Instanciation de la vue avec ROOT
        Utils.DATA_ROOT = Utils.DATA_ROOT_BASE+Utils.getUserFromSharedPreferences(this).getId()+"/"+"root";
        new GetData(Home.this, Utils.DATA_ROOT, Utils.getUserFromSharedPreferences(this).getToken()).execute();

        list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {

                if (list.getAdapter().getItem(position) instanceof Folder){

                    Folder folderSelected = (Folder) list.getAdapter().getItem(position);
                    // On entre dans le level inferieur
                    new GetData(Home.this, Utils.DATA_FOLDER+"/"+folderSelected.getId(),Utils.getUserFromSharedPreferences(Home.this).getToken()).execute();

                }else if (list.getAdapter().getItem(position) instanceof File){

                    File fileSelected = (File) list.getAdapter().getItem(position);
                    // Telechargement du fichier depuis le webservice et affichage

                }else if (list.getAdapter().getItem(position) instanceof Back){

                    if (Data.currentFolder.getParentID() == -1){
                        // Requete vers le folder root
                    	Data.currentFolder = null;
                        new GetData(Home.this, Utils.DATA_ROOT,Utils.getUserFromSharedPreferences(Home.this).getToken()).execute();
                    }else{
                        // Requete vers le folder parent
                        new GetData(Home.this, Utils.DATA_FOLDER+"/"+Data.currentFolder.getParentID(),Utils.getUserFromSharedPreferences(Home.this).getToken()).execute();
                    }

                }

            }
        });

        list.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long l) {


                if (list.getAdapter().getItem(position) instanceof Folder){

                    Folder folderSelected = (Folder) list.getAdapter().getItem(position);
                    itemSelected = (Object) folderSelected;
                    
                    quickAction.show(view);
                    quickAction.setAnimStyle(QuickAction.ANIM_REFLECT);

                }else if (list.getAdapter().getItem(position) instanceof File){

                    File fileSelected = (File) list.getAdapter().getItem(position);
                    itemSelected = (Object) fileSelected;
                    
                    quickAction.show(view);
                    quickAction.setAnimStyle(QuickAction.ANIM_REFLECT);

                }


                return false;
            }
        });



    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        return true;
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_settings:
            	
                Utils.removeUserFromSharedPreferences(this);
                Intent intent_to_login = new Intent(this, LoginActivity.class);
                startActivity(intent_to_login);
                finish();

                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     *  Asynctask
     *
     */
    
    private class DeleteData extends AsyncTask<Void, Integer, Integer> {

        Context ctx;
        Object item;
        
        public DeleteData(Context ctx, Object item) {
            this.ctx = ctx;
            this.item = item;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            pb.setVisibility(View.VISIBLE);
        }

        protected Integer doInBackground(Void... params) {

        	if (item instanceof Folder){
        		Utils.DeleteFolder(ctx, (Folder)item);
        	}else if (item instanceof File){
        		
        	}
        	
        	return null;
        	
        }

        @Override
        protected void onPostExecute(Integer i) {
            super.onPostExecute(i);

            RefreshView();
        	itemSelected = null;
        	
            if (pb!=null){pb.setVisibility(View.GONE);}
            mPullToRefreshLayout.setRefreshComplete();
        }

    }
    
    private class GetData extends AsyncTask<Void, Integer, List<Object>> {

        String url;
        String USER_API_KEY;
        Context ctx;

        public GetData(Context ctx, String url, String USER_API_KEY) {
            this.url = url;
            this.USER_API_KEY = USER_API_KEY;
            this.ctx = ctx;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            pb.setVisibility(View.VISIBLE);
        }

        protected List<Object> doInBackground(Void... params) {

            try {

                return Utils.GetData(ctx, url, USER_API_KEY);

            } catch (Exception e) {
                Log.w(getClass().getSimpleName(), "exception Connect : Json");
                e.printStackTrace();
                return null;
            }
}

        @Override
        protected void onPostExecute(List<Object> downloadedArray) {
            super.onPostExecute(downloadedArray);

            if (downloadedArray != null){

                if (listAdapter != null){
                    listAdapter.clear();
                    listAdapter.notifyDataSetChanged();
                }

                listAdapter = new GenericListAdapter(Home.this, R.layout.listview_item, downloadedArray);
                list.setAdapter(listAdapter);
                
            }else{
            	
            	
            	tv.setVisibility(View.VISIBLE);
            	/**List<Object> emptyItemArray = new ArrayList<Object>();
            	Empty emptyItem = new Empty("Aucun fichier.");
            	emptyItemArray.add(emptyItem);
            	
            	listAdapter = new GenericListAdapter(Home.this, R.layout.listview_item, emptyItemArray);
                list.setAdapter(listAdapter);**/
            	
            }

            if (pb!=null){pb.setVisibility(View.GONE);}
            mPullToRefreshLayout.setRefreshComplete();
        }

    }

    
    
    /**
     *  Refresh Layout
     */
    
    private void RefreshView(){
    	// Le folder courant est le root
		if (Data.currentFolder == null){
			new GetData(Home.this, Utils.DATA_ROOT, Utils.getUserFromSharedPreferences(Home.this).getToken()).execute();
		}else{
			 new GetData(Home.this, Utils.DATA_FOLDER+"/"+Data.currentFolder.getId(), Utils.getUserFromSharedPreferences(Home.this).getToken()).execute();
		}
    }
    
	@Override
	public void onRefreshStarted(View view) {
		
		RefreshView();
		
	}


}
