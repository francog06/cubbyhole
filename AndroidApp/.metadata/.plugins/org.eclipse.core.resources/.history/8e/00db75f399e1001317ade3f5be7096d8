package com.supinfo.cubbyhole.mobileapp.activities;

import java.util.List;

import uk.co.senab.actionbarpulltorefresh.library.PullToRefreshLayout;

import com.supinfo.cubbyhole.mobileapp.R;
import com.supinfo.cubbyhole.mobileapp.activities.Test.RefreshListFragment;
import com.supinfo.cubbyhole.mobileapp.adapters.GenericListAdapter;
import com.supinfo.cubbyhole.mobileapp.models.File;
import com.supinfo.cubbyhole.mobileapp.models.Folder;
import com.supinfo.cubbyhole.mobileapp.utils.Data;
import com.supinfo.cubbyhole.mobileapp.utils.Utils;

import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ListView;
import android.widget.ProgressBar;


public class HomeActivity extends ActionBarActivity {

	private ProgressBar pb;
    private ListView list;
    private List<Object> objArray;
    private GenericListAdapter listAdapter;
    private	PullToRefreshLayout mPullToRefreshLayout;
    private Object itemSelected = null;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// Add the Sample Fragment if there is one
	    Fragment sampleFragment = new RefreshListFragment();
	    if (sampleFragment != null) {
	        getFragmentManager().beginTransaction()
	                .replace(android.R.id.content, sampleFragment).commit();
	    }
	    
	    getSupportActionBar().setTitle(Utils.getUserFromSharedPreferences(this).getEmail());
	    
	    

	    @Override
	    public boolean onCreateOptionsMenu(Menu menu) {
	        getMenuInflater().inflate(R.menu.menu, menu);
	        return true;
	    }


	    @Override
	    public boolean onOptionsItemSelected(MenuItem item) {
	        switch (item.getItemId()) {
	            case R.id.action_settings:
	            	
	                Utils.removeUserFromSharedPreferences(this);
	                Intent intent_to_login = new Intent(this, LoginActivity.class);
	                startActivity(intent_to_login);
	                finish();

	                return true;
	            default:
	                return super.onOptionsItemSelected(item);
	        }
	    }

	    /**
	     *  Asynctask
	     *
	     */
	    
	    private class DeleteData extends AsyncTask<Void, Integer, Integer> {

	        Context ctx;
	        Object item;
	        
	        public DeleteData(Context ctx, Object item) {
	            this.ctx = ctx;
	            this.item = item;
	        }

	        @Override
	        protected void onPreExecute() {
	            super.onPreExecute();
	            pb.setVisibility(View.VISIBLE);
	        }

	        protected Integer doInBackground(Void... params) {

	        	if (item instanceof Folder){
	        		Utils.DeleteFolder(ctx, (Folder)item);
	        	}else if (item instanceof File){
	        		
	        	}
	        	
	        	return null;
	        	
	        }

	        @Override
	        protected void onPostExecute(Integer i) {
	            super.onPostExecute(i);

	            RefreshView();
	        	itemSelected = null;
	        	
	            if (pb!=null){pb.setVisibility(View.GONE);}
	            mPullToRefreshLayout.setRefreshComplete();
	        }

	    }
	    
	    private class GetData extends AsyncTask<Void, Integer, List<Object>> {

	        String url;
	        String USER_API_KEY;
	        Context ctx;

	        public GetData(Context ctx, String url, String USER_API_KEY) {
	            this.url = url;
	            this.USER_API_KEY = USER_API_KEY;
	            this.ctx = ctx;
	        }

	        @Override
	        protected void onPreExecute() {
	            super.onPreExecute();
	            pb.setVisibility(View.VISIBLE);
	        }

	        protected List<Object> doInBackground(Void... params) {

	            try {

	                return Utils.GetData(ctx, url, USER_API_KEY);

	            } catch (Exception e) {
	                Log.w(getClass().getSimpleName(), "exception Connect : Json");
	                e.printStackTrace();
	                return null;
	            }
	}

	        @Override
	        protected void onPostExecute(List<Object> downloadedArray) {
	            super.onPostExecute(downloadedArray);

	            if (downloadedArray != null){

	                if (listAdapter != null){
	                    listAdapter.clear();
	                    listAdapter.notifyDataSetChanged();
	                }

	                listAdapter = new GenericListAdapter(Home.this, R.layout.listview_item, downloadedArray);
	                list.setAdapter(listAdapter);
	            }

	            if (pb!=null){pb.setVisibility(View.GONE);}
	            mPullToRefreshLayout.setRefreshComplete();
	        }

	    }

	    
	    
	    /**
	     *  Refresh Layout
	     */
	    
	    private void RefreshView(){
	    	// Le folder courant est le root
			if (Data.currentFolder == null){
				new GetData(Home.this, Utils.DATA_ROOT, Utils.getUserFromSharedPreferences(Home.this).getToken()).execute();
			}else{
				 new GetData(Home.this, Utils.DATA_FOLDER+"/"+Data.currentFolder.getId(), Utils.getUserFromSharedPreferences(Home.this).getToken()).execute();
			}
	    }
	    
		@Override
		public void onRefreshStarted(View view) {
			
			RefreshView();
			
		}
	}
	
	
	
	
}
