<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Share extends \Entities\Share implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setFolder(\Entities\Folder $folder = NULL)
    {
        $this->__load();
        return parent::setFolder($folder);
    }

    public function getFolder()
    {
        $this->__load();
        return parent::getFolder();
    }

    public function setFile(\Entities\File $file = NULL)
    {
        $this->__load();
        return parent::setFile($file);
    }

    public function getFile()
    {
        $this->__load();
        return parent::getFile();
    }

    public function setOwner(\Entities\User $owner = NULL)
    {
        $this->__load();
        return parent::setOwner($owner);
    }

    public function getOwner()
    {
        $this->__load();
        return parent::getOwner();
    }

    public function setUsers(\Doctrine\Common\Collections\ArrayCollection $users)
    {
        $this->__load();
        return parent::setUsers($users);
    }

    public function setRead($read)
    {
        $this->__load();
        return parent::setRead($read);
    }

    public function getRead()
    {
        $this->__load();
        return parent::getRead();
    }

    public function setWrite($write)
    {
        $this->__load();
        return parent::setWrite($write);
    }

    public function getWrite()
    {
        $this->__load();
        return parent::getWrite();
    }

    public function setUser(\Entities\User $user = NULL)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function jsonSerialize()
    {
        $this->__load();
        return parent::jsonSerialize();
    }

    public function setIsWritable($isWritable)
    {
        $this->__load();
        return parent::setIsWritable($isWritable);
    }

    public function getIsWritable()
    {
        $this->__load();
        return parent::getIsWritable();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'date', 'is_writable', 'user', 'owner', 'folder', 'file');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}